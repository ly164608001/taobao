<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lxhrainy.core.sys.dao.ISysUserDao">
	
	<!-- <resultMap id="userResult" type="User">
		<id property="id" column="id" />
		<result property="company.id" column="company.id" />
		<result property="office.id" column="office.id" />
		<result property="loginName" column="login_name" />
		<result property="password" column="password" />
		<result property="no" column="no" />
		<result property="name" column="name" />
		<result property="email" column="email" />
		<result property="phone" column="phone" />
		<result property="mobile" column="mobile" />
		<result property="userType" column="user_type" />
		<result property="loginIp" column="login_ip" />
		<result property="loginDate" column="login_date" />
		<result property="remarks" column="remarks" />
		<result property="loginFlag" column="loginFlag" />
		<result property="photo" column="photo" />
		<result property="createBy.id" column="createBy.id" />
		<result property="createDate" column="create_date" />
		<result property="updateBy.id" column="updateBy.id" />
		<result property="updateDate" column="update_date" />
		<result property="company.name" column="company.name" />
		<result property="company.parentId" column="company.parentId" />
		<result property="company.parentIds" column="company.parentIds" />
		<result property="company.areT.id" column="company.areT.id" />
		<result property="company.areT.name" column="company.areT.name" />
		<result property="company.areT.parentId" column="company.areT.parentId" />
		<result property="company.areT.parentIds" column="company.areT.parentIds" />
		<result property="company.primaryPerson.id" column="company.primaryPerson.id" />
		<result property="company.primaryPerson.name" column="company.primaryPerson.name" />
		<result property="company.deputyPerson.id" column="company.deputyPerson.id" />
		<result property="company.deputyPerson.name" column="company.deputyPerson.name" />
		<result property="office.name" column="office.name" />
		<result property="office.parentId" column="office.parentId" />
		<result property="office.parentIds" column="office.parentIds" />
		<result property="office.areT.id" column="office.areT.id" />
		<result property="office.areT.name" column="office.areT.name" />
		<result property="office.areT.parentId" column="office.areT.parentId" />
		<result property="office.areT.parentIds" column="office.areT.parentIds" />
		<result property="office.primaryPerson.id" column="office.primaryPerson.id" />
		<result property="office.primaryPerson.name" column="office.primaryPerson.name" />
		<result property="office.deputyPerson.id" column="office.deputyPerson.id" />
		<result property="office.deputyPerson.name" column="office.deputyPerson.name" />
		<collection property="roleList" ofType="Role">
			<id property="id" column="roleList.id" />
			<result property="office.id" column="roleList.office.id" />
			<result property="name" column="roleList.name" />
			<result property="enname" column="roleList.enname" />
			<result property="roleType" column="roleList.roleType" />
			<result property="dataScope" column="roleList.dataScope" />
			<collection property="officeList" ofType="Office">
				<id property="id" column="roleList.officeList.id" />
			</collection>
		</collection>
	</resultMap> -->
	
    <sql id="userColumns">
    	T.id,
    	T.companyid AS "companyid",
    	T.loginname,
    	T.password,
    	T.no,
		T.name,
		T.email,
		T.phone,
		T.mobile,
		T.usertype,
		T.loginip,
		T.logintime,
		T.remarks,
		T.loginflag,
		T.photo,
		T.createuser AS "createuser.id",
		T.createtime,
		T.updateuser AS "updateuser.id",
		T.updatetime,
		T.deleted
    </sql>
    
    <sql id="userJoins">
    </sql>
	
	<!-- 根据编号获得用户 -->
	<select id="getById" resultType="SysUser">
		SELECT
			<include refid="userColumns"/>
		FROM sys_user T
		<include refid="userJoins"/>
		WHERE T.id = #{id}
	</select>
	
	<!-- 根据登录名查询用户 -->
	<select id="getByLoginName" resultType="SysUser" parameterType="SysUser">
		SELECT
			<include refid="userColumns"/>
		FROM sys_user T
		<include refid="userJoins"/>
		WHERE T.loginname = #{loginname} AND T.deleted = 0
	</select>
	
	<!-- 查询全部用户 -->
	<select id="findAllList" resultType="SysUser">
		SELECT
			<include refid="userColumns"/>
		FROM sys_user T
		<include refid="userJoins"/>
		WHERE T.deleted = 0
		ORDER BY T.name
	</select>
	

	
	<!-- 插入用户 -->
	<insert id="insert">
		INSERT INTO sys_user(
			id, 
			companyid, 
			loginname, 
			password, 
			no, 
			name, 
			email, 
			phone, 
			mobile, 
			usertype, 
			createuser, 
			createtime, 
			updateuser, 
			updatetime, 
			remarks, 
			loginflag, 
			photo, 
			deleted
		) VALUES (
			#{id}, 
			#{companyid}, 
			#{loginname}, 
			#{password}, 
			#{no}, 
			#{name}, 
			#{email}, 
			#{phone}, 
			#{mobile}, 
			#{usertype}, 
			#{createuser.id}, 
			#{createtime}, 
			#{updateuser.id}, 
			#{updatetime}, 
			#{remarks}, 
			#{loginflag}, 
			#{photo}, 
			#{deleted}
		)
	</insert>
	
	<!-- 更新用户 -->
	<update id="update">
		UPDATE sys_user SET 
			companyid = #{companyid}, 
			loginname = #{loginname}, 
			password = #{password}, 
			no = #{no}, 
			name = #{name}, 
			email = #{email}, 
			phone = #{phone}, 
			mobile = #{mobile}, 
			usertype = #{usertype}, 
			updateuser = #{updateuser.id}, 
			updatetime = #{updatetime}, 
			remarks = #{remarks},
			loginflag = #{loginflag},
			photo = #{photo}
		WHERE id = #{id}
	</update>
	
	<!-- 删除用户和角色关联表数据 -->
	<delete id="deleteUserRole">
		DELETE FROM sys_user_role WHERE userid = #{id}
	</delete>
	
	<!-- 插入用户和角色关联表数据 -->
	<insert id="insertUserRole">
		INSERT INTO sys_user_role(userid, roleid)
		<foreach collection="roleList" item="role" separator=" union all ">
			SELECT #{id}, #{role.id} FROM dual
		</foreach>
	</insert>
	
	<!-- 更新用户信息  -->
	<update id="updateUserInfo">
		UPDATE sys_user SET 
			email = #{email}, 
			phone = #{phone}, 
			mobile = #{mobile}, 
			updateuser = #{updateuser.id}, 
			updatetime = #{updatetime}, 
			remarks = #{remarks},
			photo = #{photo}
		WHERE id = #{id}
	</update>
	
	<!-- 更新用户密码 -->
	<update id="updatePasswordById">
		UPDATE sys_user SET 
			password = #{password} 
		WHERE id = #{id}
	</update>
	
	<!-- 更新登录信息，如登录IP、登录时间 -->
	<update id="updateLoginInfo">
		UPDATE sys_user SET 
			loginip = #{loginip}, 
			logintime = #{logintime} 
		WHERE id = #{id}
	</update>
	
	<!-- 逻辑删除用户 -->
	<update id="deleteById">
		UPDATE sys_user SET 
			deleted = 0
		WHERE id = #{id}
	</update>
	
</mapper>