<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lxhrainy.core.sys.dao.ISysMenuDao">
	
	<sql id="menuColumns">
		T.id,
		T.parentid AS "parent.id",
		T.parentids,
		T.name,
		T.href,
		T.type,
		T.belong,
		T.target,
		T.icon,
		T.sort,
		T.isshow,
		T.permission,
		T.remarks,
		T.createuser AS "createuser.id",
		T.createtime,
		T.updateuser AS "updateuser.id",
		T.updatetime,
		T.deleted,
		p.name AS "parent.name"
	</sql>
	
	<sql id="menuJoins">
		LEFT JOIN sys_menu p ON p.id = T.parentid
    </sql>
	
	<select id="getById" resultType="SysMenu">
		SELECT
			<include refid="menuColumns"/>
		FROM sys_menu T
		<include refid="menuJoins"/>
		WHERE T.id = #{id}
	</select>
	
	<select id="findAllList" resultType="SysMenu">
		SELECT
			<include refid="menuColumns"/>
		FROM sys_menu T
		<include refid="menuJoins"/>
		WHERE T.deleted = 0
		<if test="condition != null">
			<if test="condition.model!=null">
				<if test="condition.model.parent!=null and condition.model.parent.id!=null">
					and T.parentid = #${condition.model.parent.id}
				</if>
			</if>
		</if>
		ORDER BY T.sort
	</select>
	
	<select id="findListByPage" resultType="SysMenu">
		SELECT 
			<include refid="menuColumns"/>
		FROM sys_menu T
		<include refid="menuJoins"/>
		<if test="condition!=null">
			<where>
				<!-- <if test="condition.model!=null">
					<if test="condition.model.serialno!=null and condition.model.serialno!=''">
						T.serialno LIKE '${condition.model.serialno}%'
					</if>
				</if>
				<if test="condition.createtime_start != null">
					T.createtime > #{condition.createtime_start}
				</if>
				<if test="condition.createtime_end != null">
					T.createtime > #{condition.createtime_end}
				</if> -->
			</where>
			order by T.ID DESC
			<include refid="Sql.pager" />
		</if>
	</select>
	<select id="getCountByCondition" resultType="int">
		SELECT 
			count(*)
		FROM sys_menu T
		<include refid="menuJoins"/>
		<if test="condition!=null">
			<where>
				<!-- <if test="condition.model!=null">
					<if test="condition.model.serialno!=null and condition.model.serialno!=''">
						T.serialno LIKE '${condition.model.serialno}%'
					</if>
				</if>
				<if test="condition.createtime_start != null">
					T.createtime > #{condition.createtime_start}
				</if>
				<if test="condition.createtime_end != null">
					T.createtime > #{condition.createtime_end}
				</if> -->
			</where>
		</if>
	</select>
	
	<select id="findByParentIdsLike" resultType="SysMenu">
		SELECT
			T.id,
			T.parentid AS "parent.id",
			T.parentids
		FROM sys_menu T
		WHERE T.deleted = 0 AND T.parentids LIKE #{parentids}
		ORDER BY T.sort
	</select>
	
	<select id="findByUserIdWithType" resultType="SysMenu">
		SELECT DISTINCT
			<include refid="menuColumns"/>
		FROM sys_menu T
		LEFT JOIN sys_menu p ON p.id = T.parentid
		JOIN sys_role_menu rm ON rm.menuid = T.id
		JOIN sys_role r ON r.id = rm.roleid AND r.useable=1
		JOIN sys_user_role ur ON ur.roleid = r.id
		JOIN user_info u ON u.id = ur.userid AND u.id = #{userId}
		WHERE T.deleted = 0 AND r.deleted = 0 AND u.deleted = 0 
		<if test="belong != null">
			and T.belong = #{belong}
		</if>
		<if test="isShow != null">
			and T.isshow = #{isShow}
		</if>
		ORDER BY T.sort
	</select>
	
	<select id="getMenuIdsByRoleId" resultType="Integer">
		SELECT
			T.menuid
		FROM sys_role_menu T
		WHERE T.roleid = #{roleId}
	</select>
	
	<select id="findByParentId" resultType="SysMenu">
		SELECT DISTINCT
			<include refid="menuColumns"/>
		FROM sys_menu T
		LEFT JOIN sys_menu p ON p.id = T.parentid
		WHERE T.deleted = 0
		<if test="parentId != null">
			and T.parentid = #{parentId}
		</if>
		ORDER BY T.sort
	</select>
	
	<insert id="insert">
		INSERT INTO sys_menu(
			id, 
			parentid, 
			parentids, 
			name, 
			type,
			belong,
			href, 
			target, 
			icon, 
			sort, 
			isshow, 
			permission, 
			<if test="createuser != null and createuser.id != null">
			createuser, 
			</if>
			createtime, 
			<if test="updateuser != null and updateuser.id != null">
			updateuser, 
			</if>
			updatetime, 
			remarks, 
			deleted
		) VALUES (
			#{id}, 
			#{parent.id}, 
			#{parentids}, 
			#{name}, 
			#{type},
			#{belong},
			#{href}, 
			#{target}, 
			#{icon}, 
			#{sort}, 
			#{isshow}, 
			#{permission}, 
			<if test="createuser != null and createuser.id != null">
			#{createuser.id}, 
			</if>
			#{createtime}, 
			<if test="updateuser != null and updateuser.id != null">
			#{updateuser.id}, 
			</if>
			#{updatetime}, 
			#{remarks}, 
			#{deleted}
		)
	</insert>
	
	<update id="update">
		UPDATE sys_menu SET 
			parentid = #{parent.id}, 
			parentids = #{parentids}, 
			name = #{name}, 
			type = #{type},
			belong = #{belong},
			href = #{href}, 
			target = #{target}, 
			icon = #{icon}, 
			sort = #{sort}, 
			isshow = #{isshow}, 
			permission = #{permission}, 
			updateuser = #{updateuser.id}, 
			updatetime = #{updatetime}, 
			remarks = #{remarks}
		WHERE id = #{id}
	</update>
	
	<update id="updateParentIds">
		UPDATE sys_menu SET 
			parentid = #{parent.id}, 
			parentids = #{parentIds}
		WHERE id = #{id}
	</update>
	
	<update id="updateSort">
		UPDATE sys_menu SET 
			sort = #{sort}
		WHERE id = #{id}
	</update>
	
	<update id="deleteById">
		UPDATE sys_menu SET 
			deleted = 1
		WHERE id = #{id} OR parentids LIKE CONCAT('%,', #{id}, ',%')
	</update>
	
	<insert id="bathSaveRoleMenu">
		INSERT INTO sys_role_menu(roleid, menuid)
		<foreach collection="menuList" item="menu" separator=" union all ">
			SELECT #{menu.roleid}, #{menu.menuid} FROM dual
		</foreach>
	</insert>
	
	<update id="deleteRoleMenuByRoleId">
		delete from sys_role_menu where roleid=#{roleid}
	</update>
	
</mapper>